@page "/BooksListPage"
@inject ApiService api
@inject NavigationManager navigationManager
@layout SideBarManger

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous" />






<h3 class="text-center mb-4 mt-2">רשימת הספרים</h3>

@if (books != null)
{
    <div class="table-container">
    <table class="table table-striped table-bordered table-hover mx-auto" style="direction:rtl;text-align:center;">
        <thead>
            <tr>
                <th>שם הספר</th>
                <th>ז'אנר הספר</th>
                <th>שם הסופר\ת</th>
                <th>תאריך פרסום הספר</th>
                <th>מספר השאלות הספר</th>
                <th>האם מושאל כרגע ?</th>
                <th>אפשרויות נוספות</th>
            </tr>
        </thead>
        <tbody>
            @foreach (Books book in books)
            {
                <tr class="@(book is DigitalBooks ? "digital-book-row" : "")">
                    <td>@book.BookName</td>
                    <td>@book.GenreCode.GenreName</td>
                    <td>@book.WriterCode.FirstName @book.WriterCode.LastName</td>
                    <td>@book.DateOfPublishBook.ToShortDateString()</td>
                    <td>@lendingCounts[book.Id]</td>
                    <td>

                    @if (lendingStatuses[book.Id] == "הספר מושאל כרגע")
                    {
                        <b>@lendingStatuses[book.Id]</b>
                    }
                    else
                    {
                        @lendingStatuses[book.Id]
                    }
                    </td>
                    <td>
                        <button class="btn btn-outline-primary" @onclick="@(async () => await UpdateBook(book))">עדכון הספר</button>
                        <button class="btn btn-outline-danger" @onclick="@(async () => await DeleteBook(book))">מחיקת הספר</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    </div>
}
else
{
    <strong>הנתונים נטענים - נא להמתין</strong>
}

<style>
    body {
        background-color: #93D8D6;
    }
        

    .custom-card {
        margin-left: 10px;
        max-width: 200px;
    }

    .digital-book-row {
        background-color: green;
    }

    table-container{
        align-items:flex-end;
        align-self:start;
    }
</style>

@code {
    private BooksList books;

    private Books selectedBook;


    private Dictionary<int, string> lendingCounts = new Dictionary<int, string>();
    private Dictionary<int, string> lendingStatuses = new Dictionary<int, string>();

    private DigitalBooksList digitalBooks;

    protected override async Task OnInitializedAsync()
    {
        books = await api.SelectAllBooks();
        digitalBooks = await api.SelectAllDigitalBooks();

        foreach (var book in books)
        {
            lendingCounts[book.Id] = await CountLendingsOfBook(book);
            lendingStatuses[book.Id] = await IfLendingNow(book);
        }

    }



    private async Task UpdateBook(Books book)
    {
        //still not done...
    }

    private async Task DeleteBook(Books book)
    {
        if (book != null)
        {
            int x = await api.DeleteABook(book);
            books = await api.SelectAllBooks();
        }
    }

    private async Task<string> CountLendingsOfBook(Books book)
    {
        LendingAndReturnsBooksList lendings = await api.SelectAllLendingAndReturnsBooks();
        int count = 0;
        foreach (var lend in lendings)
        {
            if (lend.BookCode.Id == book.Id)
            {
                count++;
            }
        }
        return $"{count} השאלות";
    }

    private async Task<string> IfLendingNow(Books book)
    {
        LendingAndReturnsBooksList lendings = await api.SelectAllLendingAndReturnsBooks();
        foreach (var lend in lendings)
        {
            if (lend.BookCode.Id == book.Id && lend.DateOfReturn == DateTime.Parse("1/1/2001"))
            {
                return "הספר מושאל כרגע";
            }
        }
        return "הספר לא מושאל";
    }

    private string GetRowColorClass(Books book)
    {
        foreach(var digiBook in digitalBooks)
        {
            if (digiBook.Id == book.Id)
            {
                return "digital-book-row";
            }
        }
        return "";
    }

}
