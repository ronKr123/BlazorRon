@page "/DigitalBooksPageManger"
@inject ApiService api
@inject NavigationManager nav
@inject MangerService mangerService
@layout SideBarManger
@inject UserService userService

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">

<h3 class="display-4 text-center">הספרים הדיגיטליים</h3>

@if (digitalBooksUser != null)
{
    <div class="row">
        @foreach (DigitalBooks book in digitalBooksUser)
        {
            @if (book != null)
            {
                <div class="col-md-4">
                    <div class="card mb-3 custom-card">
                    <img src="@($"data:image/png;base64,{book.BookPic}")" class="card-img-top" alt="Book Image" />
                    <hr />
                    <div class="card-body text-center">
                        <h5 class="card-title">@book.BookName</h5>
                    </div>
                    <div class="card-footer text-center">
                        <button class="btn btn-primary" @onclick="(() => ToMusicPlayerPage(book.Id))">לחץ להאזנה</button>
                    </div>
                </div>
            </div>
            }
        }
    </div>
}
else
{
    <p>הספרים נטענים, נא להמתין</p>
}

<style>
    body {
        background-color: lightblue;
    }

    .custom-card {
        margin-left: 10px;
        max-width: 200px;
    }
</style>


@code {
    public DigitalBooksList digitalBooksList { get; set; }

    [Inject]
    private ApiLibraryService.ApiService ApiService { get; set; }


    private DigitalBooksList digitalBooksUser;


    protected override async Task OnInitializedAsync()
    {
        await LoadUserBooks();
    }

    private async Task LoadUserBooks()
    {
        digitalBooksUser = new DigitalBooksList();

        LendingAndReturnsBooksList lendings = await api.SelectAllLendingAndReturnsBooks();

        digitalBooksList = await api.SelectAllDigitalBooks();

        foreach (LendingAndReturnsBooks lend in lendings)
        {
            if(lend.UserCode.Id == userService.CurrentUser.Id && IfBookInList(lend.BookCode) && lend.DateOfReturn == new DateTime(2001, 1, 1))
            {
                digitalBooksUser.Add(GetDigitalBook(lend.BookCode.Id));
            }
        }
    }


    private DigitalBooks GetDigitalBook(int idBook)
    {
        DigitalBooks b = digitalBooksList.Find(x => x.Id == idBook);
        if(b != null)
        {
            return b;
        }
        else
        {
            return null;
        }
    }


    private bool IfBookInList(Books book)
    {
        return digitalBooksList.Any(digitalBook => digitalBook.Id == book.Id);
    }


    public void ToMusicPlayerPage(int bookId)
    {
        nav.NavigateTo($"/musicPlayerManger/{bookId}", true);
    }

}
