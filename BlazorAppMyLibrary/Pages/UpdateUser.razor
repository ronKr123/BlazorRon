@page "/UpdateUser/{UserId:int}"
@page "/UpdateUserPage"
@layout NewLayoutUser
@inject NavigationManager nav
@inject UserService userService
@inject IJSRuntime jsRuntime
@inject ApiService api

@using System.Text.RegularExpressions;

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

<style>
    body {
        background-color: lightblue;
    }

</style>


<h3 class="text-center display-4 mb-4">עדכון פרטים אישיים</h3>

@if (UserUpdated != null)
{
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="row mb-3">
                    <div class="col-md-6">
                        <b for="lastName" class="form-label" style="display:block; text-align:right;">: שם משפחה</b>
                        <input type="text" class="form-control" style="text-align:right;" id="lastName" placeholder="הכנס שם משפחה" @bind=lN />
                    </div>
                    <div class="col-md-6">
                        <b for="firstName" class="form-label" style="display:block; text-align:right;">: שם פרטי</b>
                        <input type="text" class="form-control" style="text-align:right;" id="firstName" placeholder="הכנס שם פרטי" @bind=fN />
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-6">
                        <b for="passUser" class="form-label" style="display:block; text-align:right;">: סיסמה</b>
                        <input type="password" class="form-control" id="passUser" placeholder="הכנס סיסמה" @bind=pU  />
                    </div>
                    <div class="col-md-6">
                        <b for="userName" class="form-label" style="display:block; text-align:right;">: שם משתמש</b>
                        <input type="text" class="form-control" id="userName" placeholder="הכנס שם משתמש" @bind=uN disabled/>
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-6">
                        <b for="email" class="form-label" style="display:block; text-align:right;">: אימייל</b>
                        <input type="email" class="form-control" id="email" placeholder="הכנס אימייל" @bind=emailUser  />
                    </div>
                    <div class="col-md-6">
                        <b for="city" class="form-label" style="display:block; text-align:right;">: עיר מגורים</b>
                        @if (cities != null)
                        {
                            <select class="form-select" id="city" @bind=cityNUser>
                                <option value=""> בחר עיר מן הרשימה</option>
                                @foreach (var city in cities)
                                {
                                    <option value="@city.CityName">@city.CityName</option>
                                }
                            </select>
                        }
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-6">
                        <b for="phoneNumber" class="form-label" style="display:block; text-align:right;">: מספר טלפון</b>
                        <input type="text" class="form-control" id="phoneNumber" placeholder="הכנס מספר טלפון" @bind=phoneNumberUser />
                    </div>
                    <div class="col-md-6">
                        <b for="dob" class="form-label" style="display:block; text-align:right;">: תאריך לידה</b>
                        <input type="date" class="form-control" id="dob" @bind=dateBirthUser />
                    </div>
                </div>
            </div>
        </div>
    </div>



    <div class="text-center mt-4 mb-4">
        <button class="btn btn-lg btn-primary" @onclick=SubmitForm>אישור</button>
    </div>

    @if (isUpdated)
    {
        <div class="text-center m-3" style="text-align:center;">
            <div class="alert alert-success" style="width:400px; margin-left:540px; text-align:center;" role="alert">
                <h3>
                    !המשתמש עודכן בהצלחה
                </h3>
            </div>
        </div>
    }

    @if (hasSomeError && errorsList.Count != 0)
    {
        <div class="alert alert-danger" role="alert" style="width:400px; margin-left:560px; text-align:center;">
            <h3 class="text-center">: שגיאה בעדכון המשתמש</h3>
            @foreach (string str in errorsList)
            {
                <h3 class="text-center">@str</h3>
            }
        </div>
    }
}

@code {

    [Parameter]
    public int UserId{ get; set; }

    private Users UserUpdated;

    private Users InitialUserData;

    private CityList cities;

    private List<string> errorsList;

    private bool isUpdated;

    private bool hasSomeError;

    private string cityName;

    protected async override Task OnInitializedAsync()
    {
        UsersList users = await api.SelectAllUsers();
        UserUpdated = users.Find(x => x.Id == UserId);
        InitialUserData = UserUpdated;

        cities = await api.SelectAllCities();
        isUpdated = false;

        if(UserUpdated != null)
        {
            fN = UserUpdated.FirstName;
            lN = UserUpdated.LastName;
            uN = UserUpdated.UserName;
            pU = UserUpdated.UserPassword;
            emailUser = UserUpdated.Email;
            phoneNumberUser = UserUpdated.PhoneNumber;
            cityNUser = UserUpdated.CityCode.CityName;
            dateBirthUser = UserUpdated.DateOfBirth;
        }
    }

    private string fN;
    private string lN;
    private string uN;
    private string pU;
    private string emailUser;
    private string phoneNumberUser;
    private string cityNUser;
    private DateTime dateBirthUser;

    private async void SubmitForm()
    {
        isUpdated = true;

        if (!Validate())
        {
            foreach (City cityItem in cities)
            {
                if (cityItem.CityName.Equals(cityNUser))
                {
                    UserUpdated.CityCode = cityItem;
                    break;
                }
            }

            UserUpdated.FirstName = fN;
            UserUpdated.LastName = lN;
            UserUpdated.UserName = uN;
            UserUpdated.UserPassword = pU;
            UserUpdated.Email = emailUser;
            UserUpdated.PhoneNumber = phoneNumberUser;
            UserUpdated.DateOfBirth = dateBirthUser;

            int x = await api.UpdateAUser(UserUpdated);
            userService.CurrentUser = UserUpdated;
        }
        else
        {
            UserUpdated = InitialUserData;
        }
    }

    private bool Validate()
    {
        errorsList = new List<string>();
        bool vali = false;

        if (string.IsNullOrEmpty(fN))
        {
            errorsList.Add("שם פרטי לא תקין");
            hasSomeError = true;
            isUpdated = false;
            vali = true;
        }

        if (string.IsNullOrEmpty(lN))
        {
            errorsList.Add("שם משפחה לא תקין");
            hasSomeError = true;
            isUpdated = false;
            vali = true;
        }

        if (string.IsNullOrEmpty(pU))
        {
            errorsList.Add("הסיסמה איננה תקינה");
            hasSomeError = true;
            isUpdated = false;
            vali = true;
        }

        if (string.IsNullOrEmpty(emailUser) || !IsValidEmail(emailUser))
        {
            errorsList.Add("אימייל אינו תקין");
            hasSomeError = true;
            isUpdated = false;
            vali = true;
        }

        if (string.IsNullOrWhiteSpace(cityNUser))
        {
            errorsList.Add("לא נבחר עיר מגורים");
            hasSomeError = true;
            isUpdated = false;
            vali = true;
        }

        if (dateBirthUser == DateTime.Now.Date || dateBirthUser.Year > 2010 || dateBirthUser.Year < 1950)
        {
            errorsList.Add("תאריך לידה אינו תקין");
            hasSomeError = true;
            isUpdated = false;
            vali = true;
        }

        if (string.IsNullOrEmpty(phoneNumberUser) || !Regex.IsMatch(phoneNumberUser, @"^\d{3}-\d{7}$"))
        {
            errorsList.Add("מספר טלפון אינו תקין");
            hasSomeError = true;
            isUpdated = false;
            vali = true;
        }

        return vali;
    }

    private bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }


}

