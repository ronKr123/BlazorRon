@page "/userlendings"
@inject ApiService api
@inject UserService userService
@layout NewLayoutUser
@inject IJSRuntime JSRuntime

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">


<style>


    body{
        background-color:lightblue !important;
    }

    .page-title {
        color: #333;
        text-align: center;
        margin-bottom: 50px;
        margin-top: 20px;
        font-size:40px;
    }

    .filter-section {
        display: flex;
        margin-bottom: 20px;
        justify-content: center; 
     
    }

    .lendings-container {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
    }

    .lending-item {
        background-color: #fff;
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 15px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        width: 300px;
        margin-left:20px;
        margin-bottom:20px;
    }

    .book-image {
        border-radius: 4px;
        max-width: 100%;
        max-height: 200px; 
        height: auto;
        margin: 0 auto;
        display: block; 
    }

    .lending-item:hover {
        transform: translateY(-5px); 
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); 
    }

    .not-returned {
        font-weight: bold;
        color: #ff6666; 
    }

    .book-image-container {
        display: flex;
        justify-content: center; 
        margin-bottom: 10px;
    }
    .lending-details {
        font-size:25px;
        text-align:center;
        margin-top: 10px;
    }

    .date-details span {
        display: block;
        margin-top:5px;
        margin-bottom: 5px;
    }
</style>



<h3 class="page-title display-4">ההשאלות שלי</h3>


@if (lendingUser != null)
{
    <div class="lendings-container">
        @foreach (LendingAndReturnsBooks lending in lendingUser)
        {
            @if(lending != null && lending.BookCode != null)
            {
            <div class="lending-item">
                <img src="@($"data:image/png;base64,{lending.BookCode.BookPic}")" alt="Book Image" class="book-image" />
                <div class="lending-details">
                    @{
                        GetBookType(lending.BookCode); 
                    }

                    @if (isDigitalBook)
                    {
                        <strong>@lending.BookCode.BookName</strong>
                        <br />
                        <strong style="color:dodgerblue">ספר דיגיטלי</strong>
                    }
                    else
                    {
                        <strong>@lending.BookCode.BookName</strong>
                    }

                    <div class="date-details">
                        <span>תאריך השאלה: @lending.DateOfLending.ToShortDateString()</span>
                        <span>תאריך החזרה: @(lending.DateOfReturn == DateTime.MinValue || lending.DateOfReturn.Date == new DateTime(2001, 1, 1) ? "עדיין לא הוחזר" : lending.DateOfReturn.ToShortDateString())</span>
                    </div>
                </div>
            </div>
            }
        }
    </div>
}
else
{
    <div class="text-center display-3">לא נמצאו השאלות</div>
}


@code {

    private LendingAndReturnsBooksList lendings; 

    private LendingAndReturnsBooksList lendingUser = new LendingAndReturnsBooksList();

    private DigitalBooksList digitalBooks;

    private LendingAndReturnsBooksList GetLendingUser{ get; set; }

    private bool isDigitalBook = false;


    protected async override Task OnInitializedAsync()
    {
        lendings = await api.SelectAllLendingAndReturnsBooks();
        foreach(LendingAndReturnsBooks lend in lendings)
        {
            if (lend.UserCode != null)
            {
                if (lend.UserCode.Id == userService.CurrentUser.Id)
                {
                    lendingUser.Add(lend);
                }
            }
        }
        GetLendingUser = lendingUser;

        digitalBooks = await api.SelectAllDigitalBooks();
        books = await api.SelectAllBooks();
    }

    private BooksList books;

    private void GetBookType(Books bookItem)
    {
        DigitalBooks digiBook = digitalBooks.Find(x => x.Id == bookItem.Id);

        if (digiBook != null)
        {
            isDigitalBook = true;
        }
        else
        {
            isDigitalBook = false;
        }
    }

  
}

