@page "/bookplayer/{bookId:int}"
@page "/bookplayer"
@inject IJSRuntime JSRuntime
@layout MainLayout
@inject UserService userService
@inject NavigationManager nav


<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
@if (digitalBook != null)
{
    <h3 style="text-align: center; color: #2ecc71;">ניגון ספר דיגיטלי</h3>
    <div class="container-fluid">
        <div class="row">
            @if (userService.CurrentUser != null)
            {
                <div class="col-md-2">
                    <button class="btn btn-primary btn-lg" @onclick="ToBackPage" >חזרה</button>
                </div>
            }
            <div class="col-md-10">

                <div class="container mt-5 text-center">
                    <div class="row justify-content-center">
                        <div class="col-md-8">

                            <div class="card shadow p-3 mb-5 bg-white rounded" style="width: 20rem;">
                                <img src="@($"data:image/{GetImageType(digitalBook.BookPic)};base64,{digitalBook.BookPic}")" alt="Book Image" class="card-img-top img-fluid rounded" />
                                <div class="card-body text-center">
                                    <h5 class="card-title">@digitalBook.BookName</h5>
                                </div>
                            </div>

                            <div class="decorative-bar mt-3"></div>

                            <div class="audio-controls mt-3">
                                <button class="btn btn-success" @onclick="PlayAudio">התחל ניגון</button>
                                <button class="btn btn-primary" @onclick="ContinueAudio">המשך ניגון</button>
                                <button class="btn btn-warning" @onclick="StopAndContinueAudio">עצור ניגון</button>
                                <button class="btn btn-danger" @onclick="StopAudio">בטל ניגון</button>
                            </div>

                            <div class="progress mt-3">
                                <div class="progress-bar" role="progressbar" style="width: @progressValue%;" aria-valuenow="@progressValue" aria-valuemin="0" aria-valuemax="100"></div>
                            </div>

                            @if(audioPathOfBook != "")
                            {
                                <audio id="myAudio" src="/AudioFilesOfDigitalBooks/@digitalBook.BookAudioFile" typeof="audio/mp3"></audio>
                            }
                            

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>

@code {

    [Parameter]
    public int bookId { get; set; }

    private DigitalBooks digitalBook;

    private string audioPathOfBook;



    [Inject]
    private ApiLibraryService.ApiService ApiService { get; set; }

    protected async override Task OnInitializedAsync()
    {
        digitalBook = await ApiService.SelectDigitalBookById(bookId);
        GetAudioPath();
    }

    private void GetAudioPath()
    {
        string audioPath = "C:\\Users\\USER\\Downloads\\RonLibraryProject-master\\ViewModel\\AudioBooksFiles\\";
        if(digitalBook != null)
        {
            audioPath += digitalBook.BookAudioFile;
        }
        audioPathOfBook = audioPath;
    }

    private void ToBackPage()
    {
        nav.NavigateTo("DigitalBooksPage", true);
    }

    private string GetImageType(string base64String)
    {
        // Determine image type based on the base64 string
        if (base64String.StartsWith("/9j/")) // JPG signature
        {
            return "jpeg";
        }
        else if (base64String.StartsWith("iVBORw0KGgoAAAANSUhEUgAABAAAAA")) // PNG signature
        {
            return "png";
        }
        else
        {
            // Add more image type checks as needed
            return "png"; // Default to PNG if not recognized
        }
    }

    private double initialProgressValue = 0;
    private ElementReference audioElement; // Declare the audio variable

    private bool isPlaying = false;
    private double progressValue = 0;

    private async Task PlayAudio()
    {
        isPlaying = true;
        await JSRuntime.InvokeVoidAsync("playAudio", "myAudio");
    }

    private async Task ContinueAudio()
    {
        isPlaying = true;
        await JSRuntime.InvokeVoidAsync("resumeAudio", "myAudio");
    }

    private async Task StopAudio()
    {
        isPlaying = false;
        await JSRuntime.InvokeVoidAsync("stopAudio", "myAudio");
        progressValue = 0;
    }

    private async Task StopAndContinueAudio()
    {
        isPlaying = false;
        initialProgressValue = await JSRuntime.InvokeAsync<double>("getAudioCurrentTime", "myAudio");
        await JSRuntime.InvokeVoidAsync("stopAudio", "myAudio");
        progressValue = initialProgressValue;
        await JSRuntime.InvokeVoidAsync("resumeAudio", "myAudio");
    }

    private async Task OnProgressChange(ChangeEventArgs e)
    {
        if (isPlaying)
        {
            progressValue = Convert.ToDouble(e.Value);
            await JSRuntime.InvokeVoidAsync("handleProgressBarInput", "myAudio", progressValue);
        }
    }

}

<style>
   
    body{
        background-image: url('/Images/img.jpg');
        background-size:cover;
        background-repeat:no-repeat;
    }




    .progress-bar {
        background-color: #3498db; /* Blue color for progress bar */
    }

    .btn {
        font-size: 1.2em;
        padding: 10px 20px;
        margin: 0 10px;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .btn:hover {
            filter: brightness(90%); /* Slightly darken on hover */
        }
</style>

<script>
    window.playAudio = function (audioElementId) {
        var audio = document.getElementById(audioElementId);
        if (audio !== null) {
            audio.play();
            updateProgressBar(audioElementId);
        }
    }

    window.resumeAudio = function (audioElementId) {
        var audio = document.getElementById(audioElementId);
        if (audio !== null) {
            audio.play();
            updateProgressBar(audioElementId);
        }
    }

    window.stopAudio = function (audioElementId) {
        var audio = document.getElementById(audioElementId);
        if (audio !== null) {
            audio.pause();
            audio.currentTime = 0;
            cancelAnimationFrame(audio.animationId);
        }
    }

    window.handleProgressBarInput = function (audioElementId, value) {
        var audio = document.getElementById(audioElementId);
        if (audio !== null) {
            audio.currentTime = (value / 100) * audio.duration;
        }
    }

    window.getAudioCurrentTime = function (audioElementId) {
        var audio = document.getElementById(audioElementId);
        if (audio !== null) {
            return audio.currentTime;
        }
        return 0;
    }

    window.updateProgressBar = function (audioElementId) {
        var audio = document.getElementById(audioElementId);
        var progressBar = document.getElementById("progress-bar");

        if (audio !== null && progressBar !== null) {
            var update = function () {
                var progress = (audio.currentTime / audio.duration) * 100;
                progressBar.style.width = progress + "%";
                audio.animationId = requestAnimationFrame(update);
            };
            update();
        }
    }
</script>

