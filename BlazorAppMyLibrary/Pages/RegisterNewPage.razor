@page "/RegisterNewPage"
@inject ApiService api
@inject UserService userService
@inject NavigationManager nav
@layout MainLayout
@using System.Text.RegularExpressions;


<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">

<style>
    body {
        background-color: lightblue;
    }

</style>


<h3 class="text-center display-4 mb-4">הרשמה</h3>

    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="row mb-3">
                    <div class="col-md-6">
                    <b for="lastName" class="form-label" style="display:block; text-align:right;">: שם משפחה</b>
                        <input type="text" style="text-align:right;" class="form-control" id="lastName" placeholder="הכנס שם משפחה" @bind=lastNameUser />
                    </div>
                    <div class="col-md-6">
                    <b for="firstName" class="form-label" style="display:block; text-align:right;">: שם פרטי</b>
                    <input type="text" style="text-align:right;" class="form-control" id="firstName" placeholder="הכנס שם פרטי" @bind=firstNameUser />
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-6">
                    <b for="passUser" class="form-label" style="display:block; text-align:right;">: סיסמה</b>
                        <input type="password" class="form-control" id="passUser" placeholder="הכנס סיסמה" @bind=passWordUser  />
                    </div>
                    <div class="col-md-6">
                    <b for="userName" class="form-label" style="display:block; text-align:right;">: שם משתמש</b>
                        <input type="text" class="form-control" id="userName" placeholder="הכנס שם משתמש" @bind=userNameUser />
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-6">
                    <b for="email" class="form-label" style="display:block; text-align:right;">: אימייל</b>
                        <input type="email" class="form-control" id="email" placeholder="הכנס אימייל" @bind=emailUser />
                    </div>
                    <div class="col-md-6">
                    <b for="city" class="form-label" style="display:block; text-align:right;">: עיר מגורים</b>
                        @if (cities != null)
                        {
                            <select class="form-select" id="city" @bind=cityNameUser >
                                <option value=""> בחר עיר מן הרשימה</option>
                                @foreach (var city in cities)
                                {
                                    <option value="@city.CityName">@city.CityName</option>
                                }
                            </select>
                        }
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-6">
                    <b for="phoneNumber" class="form-label" style="display:block; text-align:right;">: מספר טלפון</b>
                    <input type="text" class="form-control" id="phoneNumber" placeholder="הכנס מספר טלפון" @bind=phoneNumberUser />
                    </div>
                    <div class="col-md-6">
                    <b for="dob" class="form-label" style="display:block; text-align:right;">: תאריך לידה</b>
                        <input type="date" class="form-control" id="dob" @bind=dateBirthUser />
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="text-center mt-4 mb-4">
        <button class="btn btn-lg btn-primary" @onclick=SubmitForm>אישור</button>
    </div>

@if (isNotValid && errors.Count != 0)
{
    <div class="alert alert-danger" role="alert" style="width:400px; margin-left:560px; text-align:center;">
        <h3 class="text-center">: שגיאה בהרשמת המשתמש</h3>
        @foreach (string str in errors)
        {
            <h3 class="text-center">@str</h3>
        }
    </div>
}



@code {
    private string firstNameUser;
    private string lastNameUser;
    private string userNameUser;
    private string passWordUser;
    private string emailUser;
    private string cityNameUser;
    private DateTime dateBirthUser;
    private string phoneNumberUser;

    private CityList cities;

    private List<string> errors;

    private bool isNotValid;

    private List<string> usersNamesList;

    protected override async Task OnInitializedAsync()
    {
        cities = await api.SelectAllCities();
        UsersList users = await api.SelectAllUsers();

        //change users list to static list like in CityDB

        usersNamesList = new List<string>();
        foreach (Users u in users)
        {
            usersNamesList.Add(u.UserName);
        }

        isNotValid = false;
        usersList = new UsersList();
        errors = new List<string>();
    }


    private async void SubmitForm()
    {
        if (Validate())
        {
            Users newUser = new Users();
            newUser.FirstName = firstNameUser;
            newUser.LastName = lastNameUser;
            newUser.UserName = userNameUser;
            newUser.PhoneNumber = phoneNumberUser;
            newUser.FavoriteBooksList = new BooksList();
            newUser.UserPassword = passWordUser;
            newUser.Email = emailUser;
            newUser.DateOfBirth = dateBirthUser;
            foreach (City city in cities)
            {
                if (city.CityName.Equals(cityNameUser))
                {
                    newUser.CityCode = city;
                    break;
                }
            }

            int num = await api.InsertAUser(newUser);
            if(num != 0)
            {
                Users users = await api.SelectUserByUserName(userNameUser);
                userService.SetCurrentUser(users);
                if (users.Id != 0)
                {
                    nav.NavigateTo("IntroducingPage", true);
                }
            }
        }
        else
        {
            isNotValid = true;
        }
    }

    private void SetTheIdUser()
    {
        Users user = usersList.Find(x=> x.UserName.Equals(userService.CurrentUser.UserName) && x.UserPassword.Equals(userService.CurrentUser.UserPassword));
        if (user != null)
        {
            userService.CurrentUser.Id = user.Id;
        }
    }



    private bool Validate()
    {
        errors = new List<string>();

        bool isValid = true;

        if (string.IsNullOrEmpty(firstNameUser) || firstNameUser.Length > 10)
        {
            errors.Add("שם פרטי אינו תקין");
            isValid = false;
        }

        if (string.IsNullOrEmpty(lastNameUser) || lastNameUser.Length > 10)
        {
            errors.Add("שם משפחה אינו תקין");
            isValid = false;
        }

        if (string.IsNullOrEmpty(userNameUser) || userNameUser.Length > 10)
        {
            errors.Add("שם משתמש אינו תקין");
            isValid = false;
        }
        else
        {
            if(UserNameExists(userNameUser))
            {
                errors.Add("שם המשתמש שבחרת תפוס, אנא בחר שם משתמש אחר");
                isValid = false;
            }
        }

        if (string.IsNullOrEmpty(passWordUser) || passWordUser.Length > 10)
        {
            errors.Add("הסיסמה איננה תקינה");
            isValid = false;
        }

        if (string.IsNullOrEmpty(cityNameUser))
        {
            errors.Add("לא נבחר עיר מגורים");
            isValid = false;
        }

        if (dateBirthUser == DateTime.Now.Date || dateBirthUser.Year > 2010 || dateBirthUser.Year < 1950)
        {
            errors.Add("תאריך לידה אינו תקין");
            isValid = false;
        }
        else
        {
            isValid = true;
        }

        if (string.IsNullOrEmpty(emailUser) || !IsValidEmail(emailUser))
        {
            errors.Add("אימייל אינו תקין");
            isValid = false;
        }

        if (string.IsNullOrEmpty(phoneNumberUser) || !Regex.IsMatch(phoneNumberUser, @"^\d{3}-\d{7}$"))
        {
            errors.Add("מספר טלפון אינו תקין");
            isValid = false;
        }

        return isValid;
    }


    private bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }


    private static UsersList usersList;

    private bool UserNameExists(string userName)
    {
        return usersNamesList.Any(u => u.Equals(userName));
    }


}
