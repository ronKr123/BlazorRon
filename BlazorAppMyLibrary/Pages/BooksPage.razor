@page "/BooksPage"
@layout NewLayoutUser

@inject NavigationManager nav
@inject UserService userService

<h3 class="display-4 text-center">רשימת הספרים</h3>


<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">



@if (GetBooks != null)
{
    <div class="row">
        @foreach (Books book in GetBooks)
        {
            <div class="col-md-4">
                <div class="card mb-4 custom-card">
                    <img src="@($"data:image/png;base64,{book.BookPic}")" class="card-img-top" alt="Book Image" data-bs-toggle="tooltip" data-bs-delay="400" data-bs-placement="right" title="לחצו עליי" @onclick="(() => NavigateToDetails(book.BookName))">
                    <hr />
                    <div class="card-body text-center" @onclick="(() => NavigateToDetails(book.BookName))">
                        <h6 class="card-title">@book.BookName</h6>
                    </div>
                    @if (IfAlreadyFavorite(book))
                    {
                        <button class="btn btn-outline-danger" @onclick="@(async ()=> await RemoveBookFromFavoriteBooksList(book))">הסרה מהמועדפים</button>
                    }
                    else
                    {
                    <button class="btn btn-outline-primary" @onclick="@(async ()=> await AddBookToFavoriteBooksList(book))">הוספה למועדפים</button>
                    }
                </div>
            </div>
        }
    </div>
}
else
{
    <p>הספרים נטענים, נא להמתין</p>
}


<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>



@code {
    [Parameter]
    public static BooksList GetBooks { get; set; }

    [Inject]
    private ApiLibraryService.ApiService ApiService { get; set; }

    protected async override Task OnInitializedAsync()
    {
        GetBooks = await ApiService.SelectAllBooks();
    }


    public async void NavigateToDetails(string bookName)
    {
        BooksList books = await ApiService.SelectAllBooks();

        BookChoosen = books.Find(x => x.BookName.Equals(bookName));
        FilterPage.BookChoosen = null;
        nav.NavigateTo($"/bookdetails", true);
    }


    private bool IfAlreadyFavorite(Books book)
    {
        if (userService.CurrentUser.FavoriteBooksList != null && userService.CurrentUser.FavoriteBooksList.Count != 0)
        {
            foreach (Books book1 in userService.CurrentUser.FavoriteBooksList)
            {
                if (book1 != null)
                {
                    if (book1.Id == book.Id)
                    {
                        return true;

                    }
                }
            }
            return false;
        }
        return false;
    }


    private async Task AddBookToFavoriteBooksList(Books book)
    {
        if (IfAlreadyFavorite(book))
        {
            //do nothing
            // maybe modal box
        }
        else
        {
            if (userService.CurrentUser.FavoriteBooksList.Count == 0)
            {
                userService.CurrentUser.FavoriteBooksList.Add(book);
                int y = await ApiService.UpdateAUser(userService.CurrentUser);

            }
            else
            {
                userService.CurrentUser.FavoriteBooksList.Add(book);

                int x = await ApiService.UpdateAUser(userService.CurrentUser);
            }
        }

    }

    private async Task RemoveBookFromFavoriteBooksList(Books book)
    {
        Books bookToRemove = userService.CurrentUser.FavoriteBooksList.FirstOrDefault(b => b.Id == book.Id);
        if (bookToRemove != null)
        {
            userService.CurrentUser.FavoriteBooksList.Remove(bookToRemove);
            int x = await ApiService.UpdateAUser(userService.CurrentUser);
            // await RefreshPage();
            // not nesscery
        }
    }




    private async Task RefreshPage()
    {
        var uri = new Uri(nav.Uri);
        nav.NavigateTo(uri.AbsoluteUri, forceLoad: true);
    }



    public static Books BookChoosen{ get; set; }

}

<style>
    body {
        background-color: #93D8D6; 
    }

    .custom-card {
        margin-left: 10px;
        max-width: 200px; 
    }
</style>

