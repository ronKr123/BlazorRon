@page "/bookdetails/{bookId:int}"
@page "/bookdetails"
@layout NewLayoutUser

@inject NavigationManager nav
@inject IJSRuntime JSRuntime
@inject ApiService api

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">

@if (book != null)
{
}
else{
}

@if (book != null)
{
    <h3 class="display-4 text-center">"הספר "@book.BookName</h3>
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">


<style>

    body{
        background-color:lightblue;
    }

    .rating{
        font-size:30px;
        margin:10px;
        display:inline-block;
    }

    .rating input{
        margin:10px;
        display:none;
    }

    .rating label{
        margin: 10px;
        float: right;
        cursor:pointer;
        color:gray;
    }

    .rating label:before{
        font-size: 2.5em;
    }

    .rating input:checked ~ label{
        color:orange;
    }

</style>

@if (book != null)
{
    <div class="container mt-4">
        <div class="row">
            <div class="col-md-8">
                <div class="card">
                    <img src="@($"data:image/{GetImageType(book.BookPic)};base64,{book.BookPic}")" class="card-img-top" alt="@book.BookName">
                    <div class="card-body">
                        <h5 class="card-title">@book.BookName</h5>
                        <p class="card-text">@book.DateOfPublishBook.ToShortDateString() :פורסם בתאריך</p>
                        @if (book is DigitalBooks)
                        {
                            <p class="card-text">This is a Digital Book</p>
                        }
                        @foreach (var starFragment in DisplayStars(book.Rating))
                        {
                            @starFragment
                        }
                    </div>
                </div>
            </div>
            <div class="col-md-4">
            </div>
        </div>
    </div>

}
else
{
    <p>טוען...</p>
}

<div class="star-rating">
    @for (int i = 1; i <= MaxRating; i++)
    {
        <i class="@(i <= currentRating ? "bi bi-star-fill" : "bi bi-star")" style="color: @(i <= currentRating ? "gold" : "gray"); @(i > currentRating ? "opacity: 0.5;" : "")" @onclick="() => UpdateRating(i)"></i>
    }
</div>


<div class="rating">
    <input type="radio" id="star5" name="rating" value="5" @onclick="() => UpdateRating1(5)" /><label for="star5">
        <i class="fas fa-star"></i>
    </label>

    <input type="radio" id="star4" name="rating" value="4" @onclick="() => UpdateRating1(4)" /><label for="star4">
        <i class="fas fa-star"></i>
    </label>

    <input type="radio" id="star3" name="rating" value="3" @onclick="() => UpdateRating1(3)" /><label for="star3">
        <i class="fas fa-star"></i>
    </label>

    <input type="radio" id="star2" name="rating" value="2" @onclick="() => UpdateRating1(2)" /><label for="star2">
        <i class="fas fa-star"></i>
    </label>

    <input type="radio" id="star1" name="rating" value="1" @onclick="() => UpdateRating1(1)" /><label for="star1">
        <i class="fas fa-star"></i>
    </label>
</div>

<button class="btn btn-danger" @onclick="ResetRating" >איפוס דירוג</button>

<button class="btn btn-primary" @onclick="@(async ()=> await SaveBookRatingToDatabase())">שליחת הדירוג</button>

<script>
    function resetStars() {
        var stars = document.querySelectorAll('.rating input');
        stars.forEach(star => {
            star.checked = false;
        })
    }
</script>




<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
@code {

    [Parameter]
    public int bookId { get; set; }

    private Books book;

    [Inject]
    private ApiLibraryService.ApiService ApiService { get; set; }

    protected async override Task OnInitializedAsync()
    {
        BooksList books = await api.SelectAllBooks();
        foreach(Books b in books)
        {
            if(b.Id == bookId)
            {
                book = b;
                break;
            }
        }
        if (book == null)
        {
            book = await ApiService.SelectBookById(bookId);
        }
    }

    private string GetImageType(string base64String)
    {
        // Determine image type based on the base64 string
        if (base64String.StartsWith("/9j/")) // JPG signature
        {
            return "jpeg";
        }
        else if (base64String.StartsWith("iVBORw0KGgoAAAANSUhEUgAABAAAAA")) // PNG signature
        {
            return "png";
        }
        else
        {
            // Add more image type checks as needed
            return "png"; // Default to PNG if not recognized
        }
    }

    private List<RenderFragment> DisplayStars(int averageRating)
    {
        int filledStars = averageRating; // Round to the nearest whole number
        int emptyStars = 5 - filledStars; // Calculate the number of empty stars

        List<RenderFragment> starFragments = new List<RenderFragment>();

        // Render filled star icons
        for (int i = 0; i < filledStars; i++)
        {
            int starIndex = i;
            starFragments.Add(builder =>
            {
                builder.OpenElement(0, "i");
                builder.AddAttribute(1, "class", "bi bi-star-fill");
                builder.AddAttribute(2, "style", "color: gold;");
                builder.CloseElement();
            });
        }

        // Render empty star icons
        for (int i = 0; i < emptyStars; i++)
        {
            int starIndex = i;
            starFragments.Add(builder =>
            {
                builder.OpenElement(0, "i");
                builder.AddAttribute(1, "class", "bi bi-star");
                builder.AddAttribute(2, "style", "color: gray;");
                builder.CloseElement();
            });
        }

        return starFragments;
    }

    private int MaxRating { get; set; } = 5; // Maximum rating
    private int currentRating = 0; // Default selected rating

    private void UpdateRating(int rating)
    {
        currentRating = rating;
    }

    private async Task SubmitRating()
    {
        if (currentRating > 0)
        {
            // Handle submitting the rating (e.g., saving to database)
            // await SaveBookRatingToDatabase(currentRating);
        }
    }

    private async Task SaveBookRatingToDatabase()
    {
        if(book != null && numRating != 0)
        {
            if(book.Rating == 5)
            {
                //do nothing
            }
            else
            {
                book.Rating = book.Rating + 1;
                if(book.Rating <= 5)
                {
                    int x = await ApiService.UpdateABook(book);   
                }
            }
        }
    }

    private int numRating = 0;

    private void UpdateRating1(int ratingNumber)
    {
        numRating = ratingNumber;
    }

    private async void ResetRating()
    {
        numRating = 0;
        await JSRuntime.InvokeVoidAsync("resetStars");
    }

}