@page "/AddNewLending"
@inject ApiService api
@layout LayoutManger

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">

@if (GetUsers != null && GetBooksWhoNotLending != null && GetBooksWhoNotLending.Any())
{
    <div class="card text-center" style=" ">
        <h3 class="text-center display-3">הוספת השאלה חדשה</h3>

        <select class="form-select" @bind="selectedUserName" style="width:200px; align-self:center;">
            <option value="">בחר משתמש</option>
            @foreach (Users user in GetUsers)
            {
                <option value="@user.UserName">@user.UserName</option>
            }
        </select>

        @if (!string.IsNullOrEmpty(selectedBookName))
        {
            chooseBook = true;
        }

        <select class="form-select" @bind="selectedBookName" style="width:200px; align-self:center; margin-bottom:30px;">
            <option value="">בחר ספר</option>
            @foreach (Books book in GetBooksWhoNotLending)
            {
                <option value="@book.BookName">@book.BookName</option>
            }
        </select>

        <input type="date" class="form-control" @bind="dateLending" required style="width:200px; align-self:center; margin-bottom:30px;" />

        
       
       <button @onclick="AddLending" class="btn btn-primary" style="width:200px; align-self:center;">אישור</button>


        @if (bookLending != null)
        {
            <div class="container text-center mt-5">
                
                <div>
                    <img src="@($"data:image/{GetImageType(bookLending.BookPic)};base64,{bookLending.BookPic}")" alt="@bookLending.BookName" style="max-width: 200px; max-height: 200px;" />
                </div>
            </div>
        }
   
   </div>
}





<style>
    body {
        background-color: lightblue;
    }

    .container {
        max-width: 600px;
        margin: 0 auto;
    }

    .card {
        background-color: #f8f9fa;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .form-select {
        width: 100%;
        padding: 10px;
        border-radius: 5px;
        border: 1px solid #ced4da;
        background-color: #fff;
    }

    .form-control {
        width: 100%;
        padding: 10px;
        border-radius: 5px;
        border: 1px solid #ced4da;
        background-color: #fff;
    }

    .btn-primary {
        width: 100%;
        padding: 10px;
        border-radius: 5px;
        background-color: #007bff;
        border: none;
    }

        .btn-primary:hover {
            background-color: #0056b3;
        }

        .btn-primary:focus {
            box-shadow: none;
        }

    .img-fluid {
        max-width: 100%;
        height: auto;
    }
</style>

@code {
    [Parameter]
    public static UsersList GetUsers{ get; set; }

    [Parameter]
    public static BooksList GetBooks{ get; set; }

    private string selectedUserName; // Bind to string instead of Users
    private string selectedBookName;


    private DateTime dateLending;
    private Users userLend;
    private Books bookLend;

    private bool chooseBook;

    public BooksList GetBooksWhoNotLending{ get; set; }

    protected override async Task OnInitializedAsync()
    {
        chooseBook = false;
        GetUsers = await api.SelectAllUsers();
        GetBooks = await api.SelectAllBooks();
        LendingAndReturnsBooksList lendings = await api.SelectAllLendingAndReturnsBooks();
        BooksList bookForLending = new BooksList();
        foreach(LendingAndReturnsBooks lend in lendings)
        {
            if(lend.DateOfReturn != new DateTime(2001, 1, 1))
            {
                bookForLending.Add(lend.BookCode);
            }
        }
        GetBooksWhoNotLending = bookForLending;

    }

    private async Task<Books> FindBook(string bookName)
    {
        foreach(Books b in GetBooks)
        {
            if (b.BookName.Equals(bookName))
            {
                return b;
            }
        }
        return null;
    }

    private string GetImageType(string base64String)
    {
        if (base64String.StartsWith("/9j/"))
        {
            return "jpeg";
        }
        else if (base64String.StartsWith("iVBORw0KGgoAAAANSUhEUgAABAAAAA")) // PNG signature
        {
            return "png";
        }
        else
        {
            return "png";
        }
    }




    private async Task<Users> FindUser(string userName)
    {
        foreach (Users u in GetUsers)
        {
            if (u.UserName.Equals(userName))
            {
                return u;
            }
        }
        return null;
    }

private Books bookLending;

    private async Task AddLending()
    {
        if (selectedUserName != null && selectedBookName != null)
        {
            Users userLending = await FindUser(selectedUserName);
            bookLending = await FindBook(selectedBookName);
            if (userLending != null && bookLending != null)
            {
                LendingAndReturnsBooks lending = new LendingAndReturnsBooks
                    {
                        BookCode = bookLending,
                        UserCode = userLending,
                        DateOfLending = dateLending,
                        DateOfReturn = new DateTime(2001, 1, 1) 
                    };

                int num = await api.InsertALendingAndReturnBook(lending);
            }
        }
    }

    private async Task HandleBookSelection(ChangeEventArgs e)
    {
        selectedBookName = e.Value.ToString();
        bookLend = await FindBook(selectedBookName);
        chooseBook = true;
        StateHasChanged();
    }



}
