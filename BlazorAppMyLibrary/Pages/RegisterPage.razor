@page "/RegisterPage"
@layout MainLayout
@inject NavigationManager nav
@inject UserService userService
@inject IJSRuntime jsRuntime

<script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>

<script>
    var $j = jQuery.noConflict();
</script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">

@using System.Diagnostics;
@using System.ComponentModel.DataAnnotations;
@using System.Text.RegularExpressions;



<script>
    window.bootstrapjsinterop = {
        showModal: (modalSelector) => {
            // Show the Bootstrap modal
            $(modalSelector).modal('show');
        },

        disposeModal: (modalSelector) => {
            // Dispose of the Bootstrap modal reference to prevent memory leaks
            $(modalSelector).on('hidden.bs.modal', function (e) {
                $(this).data('bs.modal', null);
            });
        },

        disableBackButton: () => {
            // Disable browser back button
            window.history.pushState(null, document.title, window.location.href);
            window.addEventListener('popstate', function (event) {
                window.history.pushState(null, document.title, window.location.href);
            });
        }
    };
</script>

<style>
    /* Additional spacing between lines */
    .spacer {
        margin-bottom: 30px;
    }

    .spaceUnder {
        margin-bottom: 130px;
    }

    input {
        text-align: right;
        width: 100%;
        height: auto;
    }

        input[type="text"] {
            width: 100%;
            text-align: right;
        }

    label {
        text-align: right;
    }

</style>

<div class="spacer"></div>



<div class="row g-3">
    <div class="col-md-6 text-end">
        <label for="validationTooltip01" class="form-label">שם משפחה</label>
        <input type="text" class="form-control" id="validationTooltip01" placeholder="הכנס שם משפחה" @bind="lastName" required />
    </div>
    <div class="col-md-6 text-end">
        <label for="validationTooltip02" class="form-label">שם פרטי:</label>
        <input type="text" class="form-control" id="validationTooltip02" placeholder="הכנס שם פרטי" @bind="firstName" required />
    </div>
</div>

<div class="spacer"></div>

<div class="row g-3">
    <div class="col-md-6 text-end">
        <label for="dateOfBirth" class="form-label">תאריך לידה:</label>
        <input type="date" class="form-control" id="dateOfBirth" @bind="dateOfBirth" required />
    </div>
    <div class="col-md-6 text-end">
        <label for="validationTooltipCity" class="form-label">: עיר מגורים</label>
        @if (GetCities != null)
        {

            <select class="form-select" id="validationTooltipCity" @bind="cityNameSelected" required >
                <option value="">בחר עיר מגורים...</option>
                @foreach (var city in GetCities)
                {
                    <option value="@city.CityName">@city.CityName</option>
                }
            </select>
        }
        else
        {
            <div>
                <!-- Handle the case where GetCities is null, perhaps by showing an error message. -->
                Cities data is not available.
            </div>
        }
        <div class="invalid-tooltip">
            Please select a valid city.
        </div>
    </div>
</div>

<div class="spacer"></div>

<div class="row g-3">
    <div class="col-md-6 text-end">
        <label for="validationTooltipUsername" class="form-label">:שם משתמש</label>
        <div class="input-group has-validation">
            <input type="text" class="form-control" id="validationTooltipUsername" aria-describedby="validationTooltipUsernamePrepend" @bind="userName" placeholder="הכנס שם משתמש" required />
        </div>
    </div>
    <div class="col-md-6 text-end">
        <label for="validationTooltipPassword" class="form-label">:סיסמה</label>
        <input type="password" class="form-control" id="validationTooltipPassword" @bind="passwordUser" placeholder="הכנס סיסמה" required />
    </div>
</div>

<div class="spacer"></div>

<div class="row g-3">
    <div class="col-md-6 text-end">
        <label for="validationTooltip04" class="form-label">:כתובת אימייל</label>
        <input type="email" class="form-control" id="validationTooltip04" placeholder="הזן כתובת אימייל" @bind="email" required />
    </div>
    <div class="col-md-6 text-end">                  
        <label for="phoneNumber" class="form-label">:מספר טלפון</label>
        <input type="text" class="form-control" id="phoneNumber" @bind="phoneNumber" pattern="^\d{3}-\d{7}$" maxlength="11" minlength="11" placeholder="הכנס מספר טלפון" required />
    </div>
</div>

<div class="spacer"></div>

<div class="col-12 text-center mt-4">
    <button class="btn btn-success" type="button" @onclick="SubmitForm">אישור</button>
</div>

<div class="spaceUnder"></div>


<!-- Add this code to your Razor page -->
<div class="modal" id="successModal" tabindex="-1" role="dialog" aria-labelledby="successModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="successModalLabel">המשתמש התווסף בהצלחה</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                נא ללחוץ על הכפתור כדי לעבור לעמוד הבא.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-success" @onclick="NavigateToHomePage">אישור</button>
            </div>
        </div>
    </div>
</div>


<div class="modal" id="errorModal" tabindex="-1" role="dialog" aria-labelledby="errorModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content" style="background-color: #FFCCCC;">
            <div class="modal-header">
                <h5 class="modal-title" id="errorModalLabel">: אנא תקנו את השגיאות הבאות</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <ul>
                    @if (Errors != null)
                    {
                        @foreach (var error in Errors)
                        {
                            <li>@error</li>
                        }
                    }
                </ul>
            </div>
        </div>
    </div>
</div>


<script>
    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
    return new bootstrap.Tooltip(tooltipTriggerEl)
    })
</script>
 
<script>
    function showModal(modalId) {
        $('#' + modalId).modal('show');
    }
</script>


@code {
    private ErrorModal errorModal;
    private List<string> Errors;

    private string phoneNumber;

    private string firstName;
    private string lastName;
    private string cityNameSelected;
    private DateTime dateOfBirth;
    private string userName;
    private string passwordUser;
    private string email;
    private string avatarSelected;

    [Inject]
    private ApiLibraryService.ApiService ApiService { get; set; }

    [Parameter]
    public static CityList GetCities { get; set; }

    protected async override Task OnInitializedAsync()
    {
        GetCities = await ApiService.SelectAllCities();

        if (GetCities == null)
        {
            // Handle the case where GetCities is null, perhaps by showing an error message.
            // You may also consider logging the issue for further investigation.
            return;
        }

        dateOfBirth = DateTime.Now.Date;

    }


    private async Task SubmitForm()
    {
        // Validation logic here

        if (IsValid())
        {
            Users newUser = new Users();
            newUser.FirstName = firstName;
            newUser.LastName = lastName;
            newUser.DateOfBirth = dateOfBirth;
            newUser.UserName = userName;
            newUser.UserPassword = passwordUser;
            newUser.PhoneNumber = phoneNumber;
            newUser.Email = email;
            newUser.FavoriteBooksList = new BooksList();

            foreach (var city in GetCities)
            {
                if (city.CityName.Equals(cityNameSelected))
                {
                    newUser.CityCode = city;
                }
            }

            var x = await ApiService.InsertAUser(newUser);
            if (x != 0)
            {
                userService.SetCurrentUser(newUser);
                // Show success modal
                nav.NavigateTo("IntroducingPage", true);
            }
        }
        else
        {
            ShowErrorsModal();
        }
    }

    private async Task ShowSuccessModal()
    {
        // Trigger the modal display using JavaScript
        await jsRuntime.InvokeVoidAsync("bootstrapjsinterop.showModal", "#successModal");

        // Dispose of the reference to prevent memory leaks
        await jsRuntime.InvokeVoidAsync("bootstrapjsinterop.disposeModal", "#successModal");
    }

    private async Task ShowErrorsModal()
    {
        // Trigger the modal display using JavaScript
        await jsRuntime.InvokeVoidAsync("bootstrapjsinterop.showModal", "#errorModal");

        // Dispose of the reference to prevent memory leaks
        await jsRuntime.InvokeVoidAsync("bootstrapjsinterop.disposeModal", "#errorModal");
    }


    private async Task NavigateToHomePage()
    {
        // Navigate to HomePage
        nav.NavigateTo("HomePageUser", true);

        // Disable browser back button to prevent going back
        await jsRuntime.InvokeVoidAsync("historyjsinterop.disableBackButton");
    }




    private bool IsValid()
    {
        bool isValid = true;
        Errors = new List<string>();
      

        if (string.IsNullOrWhiteSpace(firstName))
        {
            isValid = false;
            Errors.Add("שם פרטי אינו תקין");
            // You can add an error message or handle the error as needed.
            // Example: AddValidationError("firstName", "First Name is required");
        }

        if (string.IsNullOrWhiteSpace(lastName))
        {
            isValid = false;
            Errors.Add("שם משפחה אינו תקין");

            // Example: AddValidationError("lastName", "Last Name is required");
        }

        if (string.IsNullOrWhiteSpace(cityNameSelected))
        {
            isValid = false;
            Errors.Add("לא נבחרה עיר מגורים");

            // Example: AddValidationError("cityNameSelected", "City is required");
        }

        if (string.IsNullOrWhiteSpace(userName))
        {
            isValid = false;
            Errors.Add("שם משתמש אינו תקין");

            // Example: AddValidationError("userName", "Username is required");
        }

        if (string.IsNullOrWhiteSpace(passwordUser))
        {
            isValid = false;
            Errors.Add("סיסמה איננה תקינה");

            // Example: AddValidationError("passwordUser", "Password is required");
        }

        if (string.IsNullOrWhiteSpace(email) || !IsValidEmail(email))
        {
            isValid = false;
            Errors.Add("האימייל אינו תקין");

            // Example: AddValidationError("email", "Invalid email address");
        }

        if (string.IsNullOrWhiteSpace(phoneNumber) || !Regex.IsMatch(phoneNumber, @"^\d{3}-\d{7}$"))
        {
            isValid = false;
            Errors.Add("מספר הטלפון אינו תקין");

            // ExampAddValidationError("phoneNumber", "Invalid phone number format (xxx-xxxxxxx)");
        }

        return isValid;
    }

    private bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }


}

