@page "/UpdateMangerDetailsPage"
@layout SideBarManger
@inject MangerService mangerService
@inject ApiService api

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">

<style>
    body {
        background-color: lightblue;
    }

</style>

<h3 class="text-center display-4 mb-4 mt-4">עדכון פרטי מנהל</h3>

@if (mangerUpdated != null)
{
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="row mb-3">
                    <div class="col-md-6">
                        <b for="lastName" class="form-label" style="display:block; text-align:right;">: שם משפחה</b>
                        <input type="text" class="form-control" style="text-align:right;" id="lastName" placeholder="הכנס שם משפחה" @bind=mangerUpdated.LastName />
                    </div>
                    <div class="col-md-6">
                        <b for="firstName" class="form-label" style="display:block; text-align:right;">: שם פרטי</b>
                        <input type="text" class="form-control" style="text-align:right;" id="firstName" placeholder="הכנס שם פרטי" @bind=mangerUpdated.FirstName />
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-6">
                        <b for="passUser" class="form-label" style="display:block; text-align:right;">: סיסמה</b>
                        <input type="password" class="form-control" id="passUser" placeholder="הכנס סיסמה" @bind=mangerUpdated.MangerPass />
                    </div>
                    <div class="col-md-6">
                        <b for="userName" class="form-label" style="display:block; text-align:right;">: שם משתמש</b>
                        <input type="text" class="form-control" id="userName" placeholder="הכנס שם משתמש" @bind=mangerUpdated.MangerUserName />
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-6">
                        <b for="dob" class="form-label" style="display:block; text-align:right;">: תאריך לידה</b>
                        <input type="date" class="form-control" id="dob" @bind=mangerUpdated.DateOfBirth />
                    </div>
                </div>
            </div>
        </div>
    </div>



    <div class="text-center mt-4 mb-4">
        <button class="btn btn-lg btn-primary" @onclick=SubmitForm>אישור</button>
    </div>

    @if (isUpdated)
    {
        <div class="text-center m-3" style="text-align:center;">
            <div class="alert alert-success" style="width:400px; margin-left:350px; text-align:center;" role="alert">
                <h3>
                   ! פרטי המנהל עודכנו בהצלחה 
                </h3>
            </div>
        </div>
    }

    @if (hasSomeError && errorsList.Count != 0)
    {
        <div class="alert alert-danger" role="alert" style="width:400px; margin-left:370px; text-align:center;">
            <h3 class="text-center">: שגיאה בעדכון פרטי המנהל</h3>
            @foreach (string str in errorsList)
            {
                <h3 class="text-center">@str</h3>
            }
        </div>
    }
}

@code {
    List<string> errorsList;
    bool hasSomeError;
    bool isUpdated;

    private async void SubmitForm()
    {
        isUpdated = true;

        if (await Validate() == false)
        {
            int x = await api.UpdateAManger(mangerUpdated);
        }
    }

    private MangerLibrary mangerUpdated;

    protected override void OnInitialized()
    {
        if (mangerService.CurrentManger != null)
        {
            mangerUpdated = mangerService.CurrentManger;
            isUpdated = false;
            mangersList = new MangerLibraryList();
        }
    }

    private async Task<bool> Validate()
    {
        errorsList = new List<string>();
        bool vali = false;

        if (string.IsNullOrEmpty(mangerUpdated.FirstName))
        {
            errorsList.Add("שם פרטי לא תקין");
            hasSomeError = true;
            isUpdated = false;
            vali = true;
        }

        if (string.IsNullOrEmpty(mangerUpdated.LastName))
        {
            errorsList.Add("שם משפחה לא תקין");
            hasSomeError = true;
            isUpdated = false;
            vali = true;
        }

        if (string.IsNullOrEmpty(mangerUpdated.MangerUserName) || mangerUpdated.MangerUserName.Length > 10)
        {
            errorsList.Add("שם המשתמש לא תקין");
            hasSomeError = true;
            isUpdated = false;
            vali = true;
        }
     

        if (string.IsNullOrEmpty(mangerUpdated.MangerPass))
        {
            errorsList.Add("הסיסמה איננה תקינה");
            hasSomeError = true;
            isUpdated = false;
            vali = true;
        }

        if (mangerUpdated.DateOfBirth == DateTime.Now.Date || mangerUpdated.DateOfBirth.Year > 2010 || mangerUpdated.DateOfBirth.Year < 1950)
        {
            errorsList.Add("תאריך לידה אינו תקין");
            hasSomeError = true;
            isUpdated = false;
            vali = true;
        }
       
        return vali;
    }

    private static MangerLibraryList mangersList;


    private async Task<bool> MangerUserNameExists(string mangerUserName)
    {
        if (mangersList.Count == 0)
        {
            mangersList = await api.SelectAllMangers();
        }
        return mangersList.Any(u => u.MangerUserName.Equals(mangerUserName));
    }


}
